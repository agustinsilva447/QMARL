import copy
import numpy as np
import matplotlib.pyplot as plt

q_noise = [0.000, 0.001, 0.003, 0.010, 0.030, 0.100, 0.300, 1.000]
gamman  = [np.pi/2]
alpha1n = [0.1, 0.01, 0.001, 0.0001]
alpha2n = [1e-8]
beta1n  = [0.9, 0.99]
beta2n  = [0.99, 0.999]
epsilnn = [1e-8]

para    = []
for g in gamman:
    for a1 in alpha1n:
        for a2 in alpha2n:
            for b1 in beta1n:
                for b2 in beta2n:
                    for e in epsilnn:
                        para.append([g,a1,a2,b1,b2,e])


#avg_rew_n0_000 = [0.22225184639816642, 1.4639808763039885, 0.7060988407294502, 0.37739737096677645]
#far_fac_n0_000 = [0.6668866736907533, 0.706942773734953, 0.7008963087501926, 0.7852307888153177]
avg_rew_n0_000 = [0.4313650296995184, 0.15251465645984902, 0.6948366724394794, 0.6060264768986402, 0.6216788781929816, 1.3847147623985496, 0.539553253917099, 0.4175616137927537, 0.6578526663743792, 0.47561302806089717, 0.5148199744104014, 0.8537377720655432, 0.8856917387217033, 0.41378523827393937, 0.5278168691694184, 0.7417150422569303]
far_fac_n0_000 = [0.8847296333745925, 0.8660922283416698, 0.9819265203645674, 0.9475687381904913, 0.8231828638301013, 0.5500151781008236, 0.9350690649119188, 0.862782828730221, 0.7836765179511667, 0.8052020598501327, 0.8638719611041913, 0.6728814229673299, 0.6960960380940766, 0.6427815350240739, 0.8964733700595934, 0.4895621099166621]
arr_rew_n0_000 = np.array(avg_rew_n0_000)
arr_fac_n0_000 = np.array(far_fac_n0_000)

#avg_rew_n0_001 = [1.532762366559057, 1.647503925447924, 2.442941369411895, 0.35512117656344105]
#far_fac_n0_001 = [0.9482338937980767, 0.5260527158621255, 0.3127507558888643, 0.4910194705845663]
avg_rew_n0_001 = [1.1205134505099397, 1.4732031510510488, 1.028859805174633, 1.3079800019793753, 0.87799360789046, 1.0868140874754006, 0.824863254351898, 1.105214616508053, 1.2297391866839003, 1.2644745018473116, 0.9116279354594345, 1.6049946668041393, 1.8906995358373857, 1.1796367523073332, 1.7267124486710406, 0.9380707747830893]
far_fac_n0_001 = [0.9763885554779046, 0.9684976174825473, 0.9602935197875063, 0.9514751515847442, 0.7198644604248998, 0.850549560114663, 0.884835734575921, 0.801951535138373, 0.7157241403277513, 0.5106134669498411, 0.753042879642451, 0.4290310233173327, 0.3143605475568354, 0.4298570224916952, 0.37358767330679005, 0.3989727647227298]
arr_rew_n0_001 = np.array(avg_rew_n0_001)
arr_fac_n0_001 = np.array(far_fac_n0_001)

#avg_rew_n0_003 = [1.5021145752491338, 0.9203550165520981, 2.055018412750303, 1.5970912014147938]
#far_fac_n0_003 = [0.9731825285467101, 0.8128197107771079, 0.2881796174335586, 0.48092185073800525]
avg_rew_n0_003 = [1.1705990405220938, 1.4681572386555573, 1.072535517546618, 1.2422978802578972, 0.7724365745458062, 0.8534999847548714, 1.0821687096681667, 0.9705740177310082, 1.8681037366060567, 0.6753893117382371, 1.5051121661582727, 1.2727007310354956, 4.61526381446009, 0.2646094480217073, 1.9110251523207686, 1.0638207935164201]
far_fac_n0_003 = [0.9587987428182629, 0.9549725366568215, 0.9449334104234652, 0.9565067655725628, 0.8703511221701762, 0.8371901590181418, 0.7452147546412987, 0.8883361837070529, 0.5483332197747256, 0.656285193373571, 0.47836238703305256, 0.45737166349766617, 0.23091262564968457, 0.3440605706753676, 0.2700933512784461, 0.46156115299465217]
arr_rew_n0_003 = np.array(avg_rew_n0_003)
arr_fac_n0_003 = np.array(far_fac_n0_003)

avg_rew_n0_010 = [1.3790734201747916, 1.0383763613536863, 1.1930042433027954, 1.2166884482057927]
far_fac_n0_010 = [0.9694007857750242, 0.7275661599652006, 0.2379071419461025, 0.2622089686023017]
arr_rew_n0_010 = np.array(avg_rew_n0_010)
arr_fac_n0_010 = np.array(far_fac_n0_010)

avg_rew_n0_030 = [1.3986436168476475, 0.8453730447935282, 0.7986335140520339, 0.3828524806161265]
far_fac_n0_030 = [0.975409329006345, 0.8866898255724234, 0.6395510015959457, 0.20790921402406398]
arr_rew_n0_030 = np.array(avg_rew_n0_030)
arr_fac_n0_030 = np.array(far_fac_n0_030)

avg_rew_n0_100 = [1.250991920870999, 1.1239057445013654, 0.7602272153612941, 2.9914241635928676]
far_fac_n0_100 = [0.9785282883570197, 0.8958071351678228, 0.263402758159581, 0.2710371085887513]
arr_rew_n0_100 = np.array(avg_rew_n0_100)
arr_fac_n0_100 = np.array(far_fac_n0_100)

avg_rew_n0_300 = [1.1065086095631678, 0.8356354004088572, 0.6395325317904286, 1.8381734913187249]
far_fac_n0_300 = [0.9777117868052956, 0.8144819338105058, 0.47094185909784303, 0.4096406629665578]
arr_rew_n0_300 = np.array(avg_rew_n0_300)
arr_fac_n0_300 = np.array(far_fac_n0_300)


avg_rew_n1_000 = [1.0093615091057064, 1.1230351443574313, 1.7614659056722606, 1.721235486509641]
far_fac_n1_000 = [0.9711864606727753, 0.8434514816038288, 0.44669060881861916, 0.6631775068119518]
arr_rew_n1_000 = np.array(avg_rew_n1_000)
arr_fac_n1_000 = np.array(far_fac_n1_000)

arr_rew = [arr_rew_n0_000,
           arr_rew_n0_001,
           arr_rew_n0_003,
           arr_rew_n0_010,
           arr_rew_n0_030,
           arr_rew_n0_100,
           arr_rew_n0_300,
           arr_rew_n1_000]
arr_fac = [arr_fac_n0_000,
           arr_fac_n0_001,
           arr_fac_n0_003,
           arr_fac_n0_010,
           arr_fac_n0_030,
           arr_fac_n0_100,
           arr_fac_n0_300,
           arr_fac_n1_000]

best_rwg = []
aver_rwg = []

for i, (l, n) in enumerate(zip(arr_rew, arr_fac)):    
    aver_rwg.append(np.mean(l))
    print("\n ---> Best rewards and fairness for quantum noise = {}".format(q_noise[i]))
    copy_rew = copy.deepcopy(l)
    sorted_array = np.sort(copy_rew)[::-1]    
    best_rwg.append(sorted_array[0])
    for rewi in sorted_array:
        id_rew = np.where(rewi == l)
        id_fac = n[id_rew[0][0]]
        hypara = para[id_rew[0][0]]
        print("Average reward = {:.6f}. Fairness factor = {:.6f}. A1 = {}. B1 = {}. B2 = {}.".format(rewi, id_fac, hypara[1], hypara[3], hypara[4]))

bestbest = np.max(best_rwg)
id_best  = np.where(best_rwg == bestbest)
id_rew   = np.where(arr_rew[id_best[0][0]] == bestbest)
hypara = para[id_rew[0][0]]
print("\nBest average rewards = {}. Quantum noise = {}. A1 = {}. B1 = {}. B2 = {}.".format(best_rwg[id_best[0][0]], q_noise[id_best[0][0]], hypara[1], hypara[3], hypara[4]))

fig0, axs = plt.subplots(1,2,figsize=(20,8))
axs[0].set_title("Best Reward vs Quantum Noise")
axs[0].plot(q_noise, best_rwg, marker="o")
axs[0].set_xlabel("Quantum Noise")
axs[0].set_ylabel("Best Reward")

axs[1].set_title("Avg Reward vs Quantum Noise")
axs[1].plot(q_noise, aver_rwg, marker="o")
axs[1].set_xlabel("Quantum Noise")
axs[1].set_ylabel("Avg Reward")
plt.show()