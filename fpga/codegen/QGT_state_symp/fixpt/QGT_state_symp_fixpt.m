%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 9.10 and Fixed-Point Designer 7.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [p00, p01, p10, p11] = QGT_state_symp_fixpt(rotAx1, rotAy2, rotAx3, rotBx1, rotBy2, rotBx3)

fm = get_fimath();

s_00 = fi(fi(0.125, 0, 16, 18, fm)*(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(cos_rot(fi_signed(fi_uminus(rotAx1)) - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_uminus(rotAx1) + rotAx3) - rotAy2 + rotBx1 + rotBx3 + rotBy2)) - cos_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + cos_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) + cos_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2) - rotBx1 + rotBx3 + rotBy2) + cos_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1) - rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1 + rotBx3) - rotBy2)) - cos_rot(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1 + rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1) - rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1 + rotBx3) - rotBy2) + cos_rot(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1 + rotBx3 + rotBy2) + cos_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1) - rotBx3) - rotBy2)) - cos_rot(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1) - rotBx3 + rotBy2) + cos_rot(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + cos_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1) - rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1 + rotBx3) - rotBy2) + cos_rot(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1 + rotBx3 + rotBy2)) - cos_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2 + rotBx1) - rotBx3) - rotBy2) + cos_rot(fi_signed(rotAx1 + rotAx3 - rotAy2 + rotBx1) - rotBx3 + rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) + cos_rot(fi_signed(fi_signed(rotAx1 + rotAx3 + rotAy2 - rotBx1) - rotBx3) - rotBy2) + cos_rot(fi_signed(rotAx1 + rotAx3 + rotAy2 - rotBx1) - rotBx3 + rotBy2)) - cos_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2)) - cos_rot(fi_signed(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3) - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)), 1, 16, 14, fm);
s_01 = fi(fi(0.125, 0, 16, 18, fm)*(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_uminus(sin_rot(fi_signed(fi_uminus(rotAx1)) - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)) + sin_rot(fi_signed(fi_uminus(rotAx1) + rotAx3) - rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2)) - sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2) - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1) - rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1 + rotBx3) - rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1) - rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1 + rotBx3) - rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1) - rotBx3) - rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1) - rotBx3 + rotBy2)) - sin_rot(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1) - rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1 + rotBx3) - rotBy2)) - sin_rot(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2 + rotBx1) - rotBx3) - rotBy2) + sin_rot(fi_signed(rotAx1 + rotAx3 - rotAy2 + rotBx1) - rotBx3 + rotBy2)) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 + rotAy2 - rotBx1) - rotBx3) - rotBy2) + sin_rot(fi_signed(rotAx1 + rotAx3 + rotAy2 - rotBx1) - rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3) - rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)), 1, 16, 14, fm);
s_10 = fi(fi(0.125, 0, 16, 18, fm)*(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(fi_signed(sin_rot(fi_signed(fi_uminus(rotAx1)) - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_uminus(rotAx1) + rotAx3) - rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2)) - sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(fi_uminus(rotAx1) + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2) - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1) - rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1 + rotBx3) - rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1) - rotAx3) - rotAy2 + rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1) - rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1 + rotBx3) - rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2) - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1) - rotBx3) - rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1) - rotBx3 + rotBy2) + sin_rot(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + sin_rot(fi_signed(rotAx1) - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1) - rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1 + rotBx3) - rotBy2)) - sin_rot(fi_signed(rotAx1 + rotAx3 - rotAy2) - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 - rotAy2 + rotBx1) - rotBx3) - rotBy2)) - sin_rot(fi_signed(rotAx1 + rotAx3 - rotAy2 + rotBx1) - rotBx3 + rotBy2)) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2)) - sin_rot(fi_signed(fi_signed(rotAx1 + rotAx3 + rotAy2 - rotBx1) - rotBx3) - rotBy2)) - sin_rot(fi_signed(rotAx1 + rotAx3 + rotAy2 - rotBx1) - rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(fi_signed(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3) - rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2)) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2)), 1, 16, 14, fm);
s_11 = fi(fi_signed(fi_signed(fi_signed(fi_signed(sin_rot(rotAx1)*sin_rot(rotAx3)*sin_rot(rotBy2)*sin_rot(fi_signed(rotAy2) - rotBx1 + rotBx3)) - sin_rot(rotAx1)*sin_rot(rotBx3)*cos_rot(rotAx3)*cos_rot(rotBy2)*cos_rot(fi_signed(rotAy2) - rotBx1)) - sin_rot(rotAx3)*sin_rot(rotAy2 + rotBx1)*cos_rot(rotAx1)*cos_rot(rotBx3)*cos_rot(rotBy2) + sin_rot(rotAy2)*sin_rot(rotAx1 + rotBy2)*cos_rot(rotAx3)*cos_rot(rotBx1)*cos_rot(rotBx3)) - sin_rot(rotBx1)*sin_rot(fi_signed(rotAx1) - rotBy2)*cos_rot(rotAx3)*cos_rot(rotAy2)*cos_rot(rotBx3)) - sin_rot(rotBx3)*sin_rot(rotAx3 + rotBy2)*cos_rot(rotAx1)*cos_rot(rotAy2 + rotBx1), 1, 16, 14, fm);

p00 = fi((s_00)^2, 0, 16, 15, fm);
p01 = fi((s_01)^2, 0, 16, 15, fm);
p10 = fi((s_10)^2, 0, 16, 15, fm);
p11 = fi((s_11)^2, 0, 16, 15, fm);
end

function result = cos_rot(a)
fm = get_fimath();

c_rot = fi([1 0.92388 0.707107 0.382683 0 -0.382683 -0.707107 -0.92388 -1 -0.92388 -0.707107 -0.382683 0 0.382683 0.707107 0.92388], 1, 16, 14, fm);
b = fi(mod(a,fi(16, 0, 5, 0, fm)) + fi(1, 0, 1, 0, fm), 0, 5, 0, fm);
result = fi(c_rot(b), 1, 16, 14, fm);
end

function result = sin_rot(a)
fm = get_fimath();

s_rot = fi([0 0.382683 0.707107 0.92388 1 0.92388 0.707107 0.382683 0 -0.382683 -0.707107 -0.92388 -1 -0.92388 -0.707107 -0.382683], 1, 16, 14, fm);
b = fi(mod(a,fi(16, 0, 5, 0, fm)) + fi(1, 0, 1, 0, fm), 0, 5, 0, fm);
result = fi(s_rot(b), 1, 16, 14, fm);
end



function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end


function y = fi_uminus(a)
    coder.inline( 'always' );
    if isfi( a )
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = -fi( a, new_nt, fimath( a ) );
    else
        y = -a;
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
