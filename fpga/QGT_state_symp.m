function [p00, p01, p10, p11] = QGT_state_symp(rotAx1, rotAy2, rotAx3, rotBx1, rotBy2, rotBx3)

s_00 = 0.125*( cos_rot(-rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) - cos_rot(-rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) - cos_rot(-rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + cos_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) + cos_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) - cos_rot(rotAx1 - rotAx3 - rotAy2 - rotBx1 + rotBx3 + rotBy2) + cos_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 - rotBx3 + rotBy2) - cos_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) - cos_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) - cos_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 - rotBx3 + rotBy2) - cos_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + cos_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 - rotBx3 - rotBy2) - cos_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) + cos_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 - rotBx3 + rotBy2) - cos_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 + rotBx3 + rotBy2) - cos_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 - rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 - rotBx3 + rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 - rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 - rotBx3 + rotBy2) - cos_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) - cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + cos_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2));
s_01 = 0.125*(-sin_rot(-rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(-rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(-rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 - rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) + sin_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 - rotBx3 - rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 - rotBx3 - rotBy2) + sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 - rotBx3 - rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 - rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2));
s_10 = 0.125*( sin_rot(-rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(-rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) + sin_rot(-rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) - sin_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(-rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 - rotAx3 - rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 - rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) + sin_rot(rotAx1 - rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 - rotBx3 - rotBy2) - sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) + sin_rot(rotAx1 - rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 - rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 - rotAy2 + rotBx1 + rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 - rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 - rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 - rotBx1 + rotBx3 + rotBy2) + sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 - rotBx3 + rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 - rotBy2) - sin_rot(rotAx1 + rotAx3 + rotAy2 + rotBx1 + rotBx3 + rotBy2));
s_11 = sin_rot(rotAx1)*sin_rot(rotAx3)*sin_rot(rotBy2)*sin_rot(rotAy2 - rotBx1 + rotBx3) 
     - sin_rot(rotAx1)*sin_rot(rotBx3)*cos_rot(rotAx3)*cos_rot(rotBy2)*cos_rot(rotAy2 - rotBx1) 
     - sin_rot(rotAx3)*sin_rot(rotAy2 + rotBx1)*cos_rot(rotAx1)*cos_rot(rotBx3)*cos_rot(rotBy2) 
     + sin_rot(rotAy2)*sin_rot(rotAx1 + rotBy2)*cos_rot(rotAx3)*cos_rot(rotBx1)*cos_rot(rotBx3) 
     - sin_rot(rotBx1)*sin_rot(rotAx1 - rotBy2)*cos_rot(rotAx3)*cos_rot(rotAy2)*cos_rot(rotBx3) 
     - sin_rot(rotBx3)*sin_rot(rotAx3 + rotBy2)*cos_rot(rotAx1)*cos_rot(rotAy2 + rotBx1);

p00 = (s_00)^2;
p01 = (s_01)^2;
p10 = (s_10)^2;
p11 = (s_11)^2;
end

function result = cos_rot(a)
c_rot = [1 0.92388 0.707107 0.382683 0 -0.382683 -0.707107 -0.92388 -1 -0.92388 -0.707107 -0.382683 0 0.382683 0.707107 0.92388];
b = mod(a,16) + 1;
result = c_rot(b);
end

function result = sin_rot(a)
s_rot = [0 0.382683 0.707107 0.92388 1 0.92388 0.707107 0.382683 0 -0.382683 -0.707107 -0.92388 -1 -0.92388 -0.707107 -0.382683];
b = mod(a,16) + 1;
result = s_rot(b);
end